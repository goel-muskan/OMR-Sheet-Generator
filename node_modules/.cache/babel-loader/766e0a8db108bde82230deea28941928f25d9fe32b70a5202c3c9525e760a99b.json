{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Downloads\\\\Omr-sheet-generator\\\\src\\\\components\\\\OmrSheet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport \"./omrSheet.css\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OMRSheet = () => {\n  _s();\n  const omrRef = useRef();\n  const [totalQuestions, setTotalQuestions] = useState(\"0\");\n  const [options, setOptions] = useState(4);\n  const [selectedColor, setSelectedColor] = useState(\"#000000\");\n  const [selectedSize, setSelectedSize] = useState(\"A4\");\n  const [optionType, setOptionType] = useState(\"upperCase\");\n  const MAX_COLUMNS = 5;\n  const MAX_COLUMNS_LEGAL = 5;\n  const renderQuestions = () => {\n    const questions = [];\n    for (let i = 1; i <= totalQuestions; i++) {\n      questions.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"omr-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"omr-question-number\",\n          style: {\n            color: selectedColor\n          },\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), renderOptionsWithColor()]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this));\n    }\n    return questions;\n  };\n  const renderOptionsWithColor = () => {\n    let optionArray;\n    switch (optionType) {\n      case \"upperCase\":\n        optionArray = Array.from({\n          length: options\n        }, (_, index) => String.fromCharCode(65 + index));\n        break;\n      case \"lowerCase\":\n        optionArray = Array.from({\n          length: options\n        }, (_, index) => String.fromCharCode(97 + index));\n        break;\n      case \"numeric\":\n        optionArray = Array.from({\n          length: options\n        }, (_, index) => (index + 1).toString());\n        break;\n      default:\n        optionArray = [];\n    }\n    return optionArray.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"omr-option\",\n      style: {\n        borderColor: selectedColor,\n        // Change border color here\n        color: selectedColor // Also set the text color to the selected color\n      },\n      children: option\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this));\n  };\n  const calculateQuestionsPerColumn = () => {\n    const maxQuestionsPerColumn = selectedSize === \"A4\" ? Math.ceil(totalQuestions / MAX_COLUMNS) : Math.ceil(totalQuestions / MAX_COLUMNS_LEGAL);\n    return Math.min(maxQuestionsPerColumn, totalQuestions);\n  };\n  const renderColumns = () => {\n    const columns = [];\n    const questionsPerColumn = calculateQuestionsPerColumn();\n    const totalColumns = selectedSize === \"A4\" ? Math.min(MAX_COLUMNS, Math.ceil(totalQuestions / questionsPerColumn)) : Math.min(MAX_COLUMNS_LEGAL, Math.ceil(totalQuestions / questionsPerColumn));\n    for (let i = 0; i < totalColumns; i++) {\n      columns.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"omr-column\",\n        style: {\n          maxWidth: selectedSize === \"A4\" ? `calc(20% - 15px)` : `calc(14.2857% - 15px)`\n        },\n        children: renderQuestions().slice(i * questionsPerColumn, (i + 1) * questionsPerColumn)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this));\n    }\n    return columns;\n  };\n  const downloadPDF = () => {\n    html2canvas(omrRef.current).then(canvas => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF();\n      const imgProps = pdf.getImageProperties(imgData);\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const pdfHeight = imgProps.height * pdfWidth / imgProps.width;\n      pdf.addImage(imgData, \"PNG\", 0, 0, pdfWidth, pdfHeight);\n      pdf.save(\"omr_sheet.pdf\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"OMR SHEET GENERATOR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Total Questions:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: totalQuestions,\n              onChange: e => setTotalQuestions(Math.min(200, e.target.value)),\n              max: 200 // Set the maximum value to 200\n              ,\n              min: 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Options :\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: options,\n              onChange: e => setOptions(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Option type:\", \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: optionType,\n              onChange: e => setOptionType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"upperCase\",\n                children: \"A, B, C, ...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"lowerCase\",\n                children: \"a, b, c, ...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"numeric\",\n                children: \"1, 2, 3, ...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Color:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              value: selectedColor,\n              onChange: e => setSelectedColor(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Size:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedSize,\n              onChange: e => setSelectedSize(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"A4\",\n                children: \"A4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Legal\",\n                children: \"Legal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: downloadPDF,\n            children: \"Download OMR as PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parent-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: selectedSize === \"A4\" ? \"a4-container\" : \"legal-container\",\n        \"data-total-questions\": totalQuestions,\n        ref: omrRef,\n        selectedColor: selectedColor,\n        selectedSize: selectedSize,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: selectedSize === \"A4\" ? \"omr-sheet-container\" : \"legal-sheet-container\",\n          children: renderColumns()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"name-signature\",\n          style: {\n            color: selectedColor,\n            fontSize: selectedSize === \"A4\" ? \"18px\" : \"14px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"name\",\n            children: \"Name: _________________\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"signature\",\n            children: \"Signature: _________________\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(OMRSheet, \"qKPMNpOOEkRvV1HeGIEyQTwgYGc=\");\n_c = OMRSheet;\nexport default OMRSheet;\nvar _c;\n$RefreshReg$(_c, \"OMRSheet\");","map":{"version":3,"names":["React","useState","useRef","jsPDF","html2canvas","jsxDEV","_jsxDEV","OMRSheet","_s","omrRef","totalQuestions","setTotalQuestions","options","setOptions","selectedColor","setSelectedColor","selectedSize","setSelectedSize","optionType","setOptionType","MAX_COLUMNS","MAX_COLUMNS_LEGAL","renderQuestions","questions","i","push","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","renderOptionsWithColor","optionArray","Array","from","length","_","index","String","fromCharCode","toString","map","option","borderColor","calculateQuestionsPerColumn","maxQuestionsPerColumn","Math","ceil","min","renderColumns","columns","questionsPerColumn","totalColumns","maxWidth","slice","downloadPDF","current","then","canvas","imgData","toDataURL","pdf","imgProps","getImageProperties","pdfWidth","internal","pageSize","getWidth","pdfHeight","height","width","addImage","save","type","value","onChange","e","target","max","onClick","ref","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Downloads/Omr-sheet-generator/src/components/OmrSheet.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./omrSheet.css\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nconst OMRSheet = () => {\n  const omrRef = useRef();\n  const [totalQuestions, setTotalQuestions] = useState(\"0\");\n  const [options, setOptions] = useState(4);\n  const [selectedColor, setSelectedColor] = useState(\"#000000\");\n  const [selectedSize, setSelectedSize] = useState(\"A4\");\n  const [optionType, setOptionType] = useState(\"upperCase\");\n\n  const MAX_COLUMNS = 5;\n  const MAX_COLUMNS_LEGAL = 5;\n\n  const renderQuestions = () => {\n    const questions = [];\n    for (let i = 1; i <= totalQuestions; i++) {\n      questions.push(\n        <div key={i} className=\"omr-question\">\n          <div\n            className=\"omr-question-number\"\n            style={{\n              color: selectedColor,\n            }}\n          >\n            {i}\n          </div>\n          {renderOptionsWithColor()}\n        </div>\n      );\n    }\n    return questions;\n  };\n  const renderOptionsWithColor = () => {\n    let optionArray;\n    switch (optionType) {\n      case \"upperCase\":\n        optionArray = Array.from({ length: options }, (_, index) =>\n          String.fromCharCode(65 + index)\n        );\n        break;\n      case \"lowerCase\":\n        optionArray = Array.from({ length: options }, (_, index) =>\n          String.fromCharCode(97 + index)\n        );\n        break;\n      case \"numeric\":\n        optionArray = Array.from({ length: options }, (_, index) =>\n          (index + 1).toString()\n        );\n        break;\n      default:\n        optionArray = [];\n    }\n    return optionArray.map((option, index) => (\n      <div\n        key={index}\n        className=\"omr-option\"\n        style={{\n          borderColor: selectedColor, // Change border color here\n          color: selectedColor, // Also set the text color to the selected color\n        }}\n      >\n        {option}\n      </div>\n    ));\n  };\n\n  const calculateQuestionsPerColumn = () => {\n    const maxQuestionsPerColumn =\n      selectedSize === \"A4\"\n        ? Math.ceil(totalQuestions / MAX_COLUMNS)\n        : Math.ceil(totalQuestions / MAX_COLUMNS_LEGAL);\n\n    return Math.min(maxQuestionsPerColumn, totalQuestions);\n  };\n\n  const renderColumns = () => {\n    const columns = [];\n    const questionsPerColumn = calculateQuestionsPerColumn();\n    const totalColumns =\n      selectedSize === \"A4\"\n        ? Math.min(MAX_COLUMNS, Math.ceil(totalQuestions / questionsPerColumn))\n        : Math.min(\n            MAX_COLUMNS_LEGAL,\n            Math.ceil(totalQuestions / questionsPerColumn)\n          );\n\n    for (let i = 0; i < totalColumns; i++) {\n      columns.push(\n        <div\n          key={i}\n          className=\"omr-column\"\n          style={{\n            maxWidth:\n              selectedSize === \"A4\"\n                ? `calc(20% - 15px)`\n                : `calc(14.2857% - 15px)`,\n          }}\n        >\n          {renderQuestions().slice(\n            i * questionsPerColumn,\n            (i + 1) * questionsPerColumn\n          )}\n        </div>\n      );\n    }\n    return columns;\n  };\n\n  const downloadPDF = () => {\n    html2canvas(omrRef.current).then((canvas) => {\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF();\n      const imgProps = pdf.getImageProperties(imgData);\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\n\n      pdf.addImage(imgData, \"PNG\", 0, 0, pdfWidth, pdfHeight);\n      pdf.save(\"omr_sheet.pdf\");\n    });\n  };\n\n  return (\n    <div className=\"main\">\n      <div className=\"fields\">\n        <h1>OMR SHEET GENERATOR</h1>\n        <div>\n          <div>\n            <label>\n              Total Questions:{\" \"}\n              <input\n                type=\"number\"\n                value={totalQuestions}\n                onChange={(e) =>\n                  setTotalQuestions(Math.min(200, e.target.value))\n                }\n                max={200} // Set the maximum value to 200\n                min={0}\n              />\n            </label>\n            <br />\n            <label>\n              Options :{\" \"}\n              <input\n                type=\"number\"\n                value={options}\n                onChange={(e) => setOptions(e.target.value)}\n              />\n            </label>\n            <br />\n            <label>\n              Option type:{\" \"}\n              <select\n                value={optionType}\n                onChange={(e) => setOptionType(e.target.value)}\n              >\n                <option value=\"upperCase\">A, B, C, ...</option>\n                <option value=\"lowerCase\">a, b, c, ...</option>\n                <option value=\"numeric\">1, 2, 3, ...</option>\n              </select>\n            </label>\n            <br />\n            <label>\n              Select Color:{\" \"}\n              <input\n                type=\"color\"\n                value={selectedColor}\n                onChange={(e) => setSelectedColor(e.target.value)}\n              />\n            </label>\n\n            <br />\n            <label>\n              Select Size:\n              <select\n                value={selectedSize}\n                onChange={(e) => setSelectedSize(e.target.value)}\n              >\n                <option value=\"A4\">A4</option>\n                <option value=\"Legal\">Legal</option>\n              </select>\n            </label>\n            <br />\n            <button onClick={downloadPDF}>Download OMR as PDF</button>\n          </div>\n        </div>\n      </div>\n      {/* conditional rendering of container */}\n      <div className=\"parent-container\">\n        <div\n          className={selectedSize === \"A4\" ? \"a4-container\" : \"legal-container\"}\n          data-total-questions={totalQuestions}\n          ref={omrRef}\n          selectedColor={selectedColor}\n          selectedSize={selectedSize}\n        >\n          <div\n            className={\n              selectedSize === \"A4\"\n                ? \"omr-sheet-container\"\n                : \"legal-sheet-container\"\n            }\n          >\n            {renderColumns()}\n          </div>\n          <div\n            className=\"name-signature\"\n            style={{\n              color: selectedColor,\n              fontSize: selectedSize === \"A4\" ? \"18px\" : \"14px\",\n            }}\n          >\n            <div className=\"name\">Name: _________________</div>\n            <div className=\"signature\">Signature: _________________</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OMRSheet;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}